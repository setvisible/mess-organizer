<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<groupId>com.github.setvisible</groupId>
	<artifactId>MessOrganizer</artifactId>
	<version>1.0.0</version>
	<packaging>jar</packaging>

	<name>MessOrganizer</name>
	<url>https://github.com/setvisible/mess-organizer</url>
	<description>It organizes the mess</description>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<!-- This configures the compiler to produce Java 8 class files. -->
		<!-- The minimum JDK version installed is 8 of course, -->
		<!-- but newer JDK releases should work too. -->
		<java.version>1.8</java.version>
		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>

		<!-- Remark: -->
		<!-- Visit Maven Central to find the latest versions -->
		<!-- https://search.maven.org/classic/#search -->
		<slf4j.version>1.7.25</slf4j.version>
		<afterburner.version>1.7.0</afterburner.version>
		<jna.version>5.2.0</jna.version>
		<commons.io.version>2.6</commons.io.version>
		<junit.version>4.12</junit.version>
	</properties>

	<dependencies>

		<!-- Simple Logging Facade for Java (SLF4J) -->
		<!-- The Simple facade or abstraction for various logging frameworks -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${slf4j.version}</version>
		</dependency>

		<!-- Afterburner.fx -->
		<!-- The Opinionated JavaFX Productivity Igniter -->
		<dependency>
			<groupId>com.airhacks</groupId>
			<artifactId>afterburner.fx</artifactId>
			<version>${afterburner.version}</version>
			<scope>compile</scope>
		</dependency>

		<!-- Java Native Access -->
		<!-- JNA provides Java programs easy access to native shared libraries (DLLs on Windows) -->
		<!-- without writing anything but Java code no JNI or native code is required. -->
		<dependency>
			<groupId>net.java.dev.jna</groupId>
			<artifactId>jna</artifactId>
			<version>${jna.version}</version>
		</dependency>
		<dependency>
			<groupId>net.java.dev.jna</groupId>
			<artifactId>jna-platform</artifactId>
			<version>${jna.version}</version>
		</dependency>		
		
		<!-- Apache Commons IO -->
		<!-- Library of utilities to assist with developing IO functionality -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>${commons.io.version}</version>
		</dependency>

		<!-- Unit Test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>
		<defaultGoal>clean package</defaultGoal>

		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<verbose>true</verbose>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>

			<!-- Maven Shape Plugin creates an executable Uber-JAR -->
			<!-- An Uber JAR is, in short, a JAR containing everything. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>3.2.1</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<minimizeJar>true</minimizeJar>
							<transformers>
								<transformer
									implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>com.github.setvisible.messorganizer.Main</mainClass>
								</transformer>
							</transformers>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>

		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>

	</build>
</project>